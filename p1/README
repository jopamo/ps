# Project 1: Skeleton Multiple Processes

## Overview
This project is a warm-up exercise for managing multiple processes in a Linux environment. It builds on knowledge from earlier Linux-related courses and sets the stage for future operating systems projects.

---

## Requirements

### 1. User Process
- **Source:** `user.c`
- **Executable:** `user`
- **Behavior:**
  - Accepts a single command-line argument (an integer `N`).
  - Loops `N` times.
  - Each iteration:
    1. Prints `USER PID:<pid> PPID:<ppid> Iteration:<i> before sleeping`.
    2. Sleeps for 1 second.
    3. Prints `USER PID:<pid> PPID:<ppid> Iteration:<i> after sleeping`.

> *Note:* The `user` program is typically **not** run directly; it is launched by `oss`.

### 2. OSS Process
- **Source:** `oss.c`
- **Executable:** `oss`
- **Usage:**
  ```bash
  oss [-h] [-n <proc>] [-s <simul>] [-t <iter>]
  ```
  - `-h`: Prints help and exits.
  - `-n <proc>`: Total number of `user` processes to create.
  - `-s <simul>`: Maximum number of `user` processes to run at once.
  - `-t <iter>`: Number of iterations for each `user` process.
- **Example:**
  ```bash
  oss -n 5 -s 3 -t 7
  ```
  - Spawns 5 total children, up to 3 at a time, each doing 7 iterations.
- **Implementation:**
  - Uses `fork()`/`exec()` to start each `user`.
  - Waits for a child to finish once the maximum concurrency (`-s`) is reached, before launching another.

---

## Building and Running

### Compilation
```bash
make
```
- Produces two executables: **`oss`** and **`user`**.
- Automatically runs [Unity](https://github.com/ThrowTheSwitch/Unity) tests afterward.

To remove object files, executables, and test binaries:
```bash
make clean
```

### Usage Examples
1. **Help/Usage**
   ```bash
   ./oss -h
   ```
2. **Launching Processes**
   ```bash
   ./oss -n 5 -s 3 -t 7
   ```
   - Spawns 5 processes total, 3 at once, each running 7 iterations.

> *Note:* Running `./user <iterations>` directly is mainly for debugging or testing. Typically, `oss` does this for you.

---

## Submission Workflow
1. Ensure all code is **committed** in Git.
2. Run the submission script:
   ```bash
   ./submit.sh 1
   ```
> *Note:* This script automatically satisfies **all** submission requirements.
